<!doctype html>
<html lang="en">

<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

    <!-- Font awesome icons -->
    <link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">

    <!-- RALEWAY FONT -->
    <link href="https://fonts.googleapis.com/css?family=Raleway:200,300,400,500" rel="stylesheet">

    <!-- Roboto font -->
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,600" rel="stylesheet">

    <link rel="stylesheet" type="text/css" href="/css/style.css">


    <title>Copyright</title>
    <script src="./node_modules/web3/dist/web3-light.js"></script>

</head>

<body>

    <div class="page-container">

        <div class="row">

            <!-- SIDENAV BEGINS -->


            <div class="col-lg-2 sidenav">

                <div class="title">
                    <a href="/store">STORE</a>
                </div>
                <div class="title">
                    <a href="/access">SHOWTIME</a>
                </div>
                <div class="title">
                    <a href="/up">UPLOAD</a>
                </div>
                <div class="title">
                    <a href="/transfer">TRANSFERS</a>
                </div>
                <div class="title">
                    <a href="/">DECRYPT</a>
                </div>
                <div class="title">
                    <a href="/dagger">DAGGER LOGS</a>
                </div>

            </div>

            <!-- SIDENAV ENDS -->






            <!-- MAIN BODY BEGINS -->


            <div class="offset-lg-2 col-lg-10 main-body">


                <div class="row">
                    <div class="title col-4">
                        TRANSFER
                    </div>

                </div>


                <br>

                <div class="divider">TRANSFER YOUR CONTENT</div>

                <div class="row">

                    <!-- ROW STARTS -->
                    <div class="col-4 text-left search">
                        <input type="search" class="search" name="to" placeholder="TO" id="to">
                    </div>
                    <div class="col-4 text-left search">
                        <input type="search" class="search" name="token-id" placeholder="TOKEN-ID" id="token-id">
                    </div>
                    <div class="col-4 text-left search">
                        <input type="search" class="search" name="symbol" placeholder="TOKEN-SYMBOL" id="symbol">
                    </div>


                </div>

                <!-- ROW ENDS -->
                <br><br>
                <button class="btn btn-primary" style="width: 10vw; margin: auto;" onclick="transfer()">GO</button>
                <br><br>
            </div>

            <!-- MAIN BODY ENDS -->

        </div>

    </div>


    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
    <script>
        var to = document.getElementById('to').value
        var sym = document.getElementById('symbol').value
        var token_id = document.getElementById('token-id').value
        var transfer = require('../contractFunctions.js');


        function on(sym, token_id, to) {
            $.get("http://localhost:8000/transfer/" + sym + "/" + token_id + "/" + to, function(data, status) {
                console.log(data, status);
            });
        }
    </script>
    <script>
        if (typeof web3 !== 'undefined' && false) {
            web3 = new Web3(web3.currentProvider);
        } else {
            // set the provider you want from Web3.providers
            web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:7545"));
        }
        web3.eth.defaultAccount = web3.eth.accounts[0];
        console.log("the defualt account is " + web3.eth.defaultAccount);
        var DeployerContract = web3.eth.contract([{
            "constant": true,
            "inputs": [{
                "name": "keyvalue",
                "type": "string"
            }],
            "name": "getAddressFromCores",
            "outputs": [{
                "name": "",
                "type": "address"
            }],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        }, {
            "constant": false,
            "inputs": [{
                "name": "name",
                "type": "string"
            }, {
                "name": "symbol",
                "type": "string"
            }],
            "name": "createCore",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        }, {
            "inputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
        }]);
        var DeployerContractAddress = "0xf382979f7598ba321295e3b9d111fcdead2c051c";
        var CoreDeployer = DeployerContract.at(DeployerContractAddress);
        var CoreContract = web3.eth.contract([{
            "constant": true,
            "inputs": [{
                "name": "_interfaceID",
                "type": "bytes4"
            }],
            "name": "supportsInterface",
            "outputs": [{
                "name": "",
                "type": "bool"
            }],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        }, {
            "constant": true,
            "inputs": [],
            "name": "name",
            "outputs": [{
                "name": "",
                "type": "string"
            }],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        }, {
            "constant": false,
            "inputs": [{
                "name": "_to",
                "type": "address"
            }, {
                "name": "_tokenId",
                "type": "uint256"
            }],
            "name": "approve",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        }, {
            "constant": true,
            "inputs": [],
            "name": "totalSupply",
            "outputs": [{
                "name": "",
                "type": "uint256"
            }],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        }, {
            "constant": true,
            "inputs": [{
                "name": "",
                "type": "uint256"
            }],
            "name": "tokenIndexToOwner",
            "outputs": [{
                "name": "",
                "type": "address"
            }],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        }, {
            "constant": false,
            "inputs": [{
                "name": "_from",
                "type": "address"
            }, {
                "name": "_to",
                "type": "address"
            }, {
                "name": "_tokenId",
                "type": "uint256"
            }],
            "name": "transferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        }, {
            "constant": true,
            "inputs": [{
                "name": "_tokenId",
                "type": "uint256"
            }],
            "name": "ownerOf",
            "outputs": [{
                "name": "owner",
                "type": "address"
            }],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        }, {
            "constant": true,
            "inputs": [{
                "name": "_owner",
                "type": "address"
            }],
            "name": "balanceOf",
            "outputs": [{
                "name": "count",
                "type": "uint256"
            }],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        }, {
            "constant": true,
            "inputs": [{
                "name": "_owner",
                "type": "address"
            }],
            "name": "tokensOfOwner",
            "outputs": [{
                "name": "ownerTokens",
                "type": "uint256[]"
            }],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        }, {
            "constant": true,
            "inputs": [],
            "name": "symbol",
            "outputs": [{
                "name": "",
                "type": "string"
            }],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        }, {
            "constant": true,
            "inputs": [{
                "name": "",
                "type": "uint256"
            }],
            "name": "tokenIndexToApproved",
            "outputs": [{
                "name": "",
                "type": "address"
            }],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        }, {
            "constant": false,
            "inputs": [{
                "name": "_to",
                "type": "address"
            }, {
                "name": "_tokenId",
                "type": "uint256"
            }],
            "name": "transfer",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        }, {
            "constant": true,
            "inputs": [],
            "name": "nonce",
            "outputs": [{
                "name": "",
                "type": "uint256"
            }],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        }, {
            "constant": false,
            "inputs": [{
                "name": "personalMessage",
                "type": "string"
            }, {
                "name": "hashprefix",
                "type": "string"
            }, {
                "name": "_assetType",
                "type": "uint256"
            }],
            "name": "_generateAssets",
            "outputs": [{
                "name": "",
                "type": "uint256"
            }],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        }, {
            "constant": true,
            "inputs": [{
                "name": "",
                "type": "uint256"
            }],
            "name": "assets",
            "outputs": [{
                "name": "assetHash",
                "type": "string"
            }, {
                "name": "creationTime",
                "type": "uint64"
            }, {
                "name": "assetType",
                "type": "uint256"
            }, {
                "name": "assetStatus",
                "type": "uint256"
            }, {
                "name": "personalisedMessage",
                "type": "string"
            }],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        }, {
            "inputs": [{
                "name": "name",
                "type": "string"
            }, {
                "name": "symbol",
                "type": "string"
            }],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
        }, {
            "anonymous": false,
            "inputs": [{
                "indexed": false,
                "name": "from",
                "type": "address"
            }, {
                "indexed": false,
                "name": "to",
                "type": "address"
            }, {
                "indexed": false,
                "name": "_tokenId",
                "type": "uint256"
            }],
            "name": "Approval",
            "type": "event"
        }, {
            "anonymous": false,
            "inputs": [{
                "indexed": false,
                "name": "from",
                "type": "address"
            }, {
                "indexed": false,
                "name": "to",
                "type": "address"
            }, {
                "indexed": false,
                "name": "tokenId",
                "type": "uint256"
            }],
            "name": "Transfer",
            "type": "event"
        }, {
            "anonymous": false,
            "inputs": [{
                "indexed": false,
                "name": "",
                "type": "string"
            }, {
                "indexed": false,
                "name": "",
                "type": "uint256"
            }, {
                "indexed": false,
                "name": "",
                "type": "string"
            }, {
                "indexed": false,
                "name": "",
                "type": "uint256"
            }, {
                "indexed": false,
                "name": "",
                "type": "uint256"
            }],
            "name": "AssetCreated",
            "type": "event"
        }]);

        function transfer() {
            var to = document.getElementById('to').value
            var sym = document.getElementById('symbol').value
            var token_id = document.getElementById('token-id').value

            CoreDeployer.getAddressFromCores(sym, function(err, res) {
                if (err) {
                    console.log(err);
                } else {
                    console.log("address is" + res);
                    var CoreInstance = CoreContract.at(res);
                    console.log("coreinstance is " + CoreInstance);
                    CoreInstance.transfer(to, token_id, function(err, r) {
                        if (err) {
                            console.log(err);
                        } else {
                            console.log(r);
                        }

                    })
                }
            })
        }
    </script>
</body>

</html>